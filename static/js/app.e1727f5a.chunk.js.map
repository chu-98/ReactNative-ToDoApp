{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","useEffect","getItem","s","parse","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onChangeText","payload","onSubmitEditing","newToDos","Date","now","value","returnKeyType","keyboardType","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginBottom","alignItems"],"mappings":"oRAAaA,EACP,QADOA,EAEL,UAFKA,EAGH,U,ikBCeK,SAASC,IACtB,MAA8BC,oBAAS,GAAvC,WAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,WAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,IAAnC,WAAOK,EAAP,KAAcC,EAAd,KAOMC,EAAY,SAAMC,GAAN,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAERE,IAAaC,QAdL,SAc0BC,KAAKC,UAAUN,KAFzC,sHAiBlBO,qBAAU,YATQ,mBAAAN,EAAAC,OAAA,2EAAAD,EAAA,MAEEE,IAAaK,QAtBf,WAoBA,cAERC,EAFQ,yBAGF,MAALA,EAAYX,EAASO,KAAKK,MAAMD,IAAM,MAH/B,+FAUhBE,KACC,IAsCH,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,kBAACC,EAAA,EAAD,CAAWH,MAAM,SACjB,kBAACD,EAAA,EAAD,CAAMC,MAAOC,EAAOG,QAClB,kBAACC,EAAA,EAAD,CAAkBC,QAjEX,kBAAMzB,GAAW,KAkEtB,kBAAC0B,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAO,QACPA,MAAO9B,EAAU,QAAUH,IAL/B,SAWF,kBAAC4B,EAAA,EAAD,CAAkBC,QA9ET,kBAAMzB,GAAW,KA+ExB,kBAAC0B,EAAA,EAAD,CACEP,MAAO,CACLQ,SAAU,GACVC,WAAY,MACZC,MAAO,QACPA,MAAQ9B,EAAoBH,EAAV,UALtB,YAYJ,kBAACkC,EAAA,EAAD,CACEC,aAzFe,SAAAC,GAAO,OAAI9B,EAAQ8B,IA0FlCC,gBAnEU,0BAAA1B,EAAAC,OAAA,mDACD,KAATP,EADU,wDAIRiC,EAJQ,OAIQ/B,GAJR,UAIgBgC,KAAKC,MAAQ,CAAEnC,OAAMF,aACnDK,EAAS8B,GALK,WAAA3B,EAAA,MAMRF,EAAU6B,IANF,OAOdhC,EAAQ,IAPM,6DAoEVmC,MAAOpC,EACPqC,cAAc,OACdC,aAAa,UACbC,YAAazC,EAAU,cAAgB,eACvCoB,MAAOC,EAAOqB,QAEhB,kBAACC,EAAA,EAAD,KACGC,OAAOC,KAAKzC,GAAO0C,KAAI,SAAAC,GAAG,OACzB3C,EAAM2C,GAAK/C,UAAYA,EACrB,kBAACmB,EAAA,EAAD,CAAMC,MAAOC,EAAO2B,KAAMD,IAAKA,GAC7B,kBAACpB,EAAA,EAAD,CAAMP,MAAOC,EAAO4B,UAAW7C,EAAM2C,GAAK7C,MAC1C,kBAACuB,EAAA,EAAD,CAAkBC,QAAS,kBArEpB,SAAMqB,GAAN,eAAAvC,EAAAC,OAAA,mDACG,QAAhByC,IAASC,GADI,qBAEJC,QAAQ,qCAFJ,8BAIPjB,EAJO,KAIS/B,IACN2C,GAChB1C,EAAS8B,GANI,WAAA3B,EAAA,MAOPF,EAAU6B,IAPH,+BAUfkB,IAAMC,MAAM,eAAgB,gBAAiB,CAC3C,CAAEpD,KAAM,SAAUkB,MAAO,UACzB,CACElB,KAAM,WACNkB,MAAO,cACPM,QAAS,0BAAAlB,EAAAC,OAAA,8DACD0B,EADC,KACe/B,IACN2C,GAChB1C,EAAS8B,GAHF,WAAA3B,EAAA,MAIDF,EAAU6B,IAJT,gEAfE,6DAqE0BoB,CAAWR,KAC1C,kBAACS,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAM,GAAI5B,MAAM,UAGzC,UAOd,IAAMT,EAASsC,IAAWC,OAAO,CAC/BtC,UAAW,CACTuC,KAAM,EACNC,gBAAiBjE,EACjBkE,kBAAmB,IAErBvC,OAAQ,CACNwC,eAAgB,gBAChBC,cAAe,MACfC,UAAW,KAEbxB,MAAO,CACLoB,gBAAiB,QACjBC,kBAAmB,GACnBI,gBAAiB,GACjBC,aAAc,GACdF,UAAW,GACXG,aAAc,GACdzC,SAAU,IAEZoB,KAAM,CACJiB,cAAe,MACfD,eAAgB,gBAChBM,WAAY,SACZR,gBAAiBjE,EACjBwE,aAAc,GACdF,gBAAiB,GACjBJ,kBAAmB,GACnBK,aAAc,IAEhBnB,SAAU,CACRnB,MAAO,QACPF,SAAU,GACVC,WAAY,U","file":"static/js/app.e1727f5a.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#5C5C60\",\n  toDoBG: \"#3A3D40\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\n\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n\n  const onChangeText = payload => setText(payload);\n\n  const saveToDos = async toSave => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (e) {\n      // saving error\n    }\n  };\n\n  const loadToDos = async () => {\n    try {\n      const s = await AsyncStorage.getItem(STORAGE_KEY);\n      return s != null ? setToDos(JSON.parse(s)) : null;\n    } catch (e) {\n      // error reading value\n    }\n  };\n\n  useEffect(() => {\n    loadToDos();\n  }, []);\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  const deleteToDo = async key => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 40,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 40,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        onChangeText={onChangeText}\n        onSubmitEditing={addToDo}\n        value={text}\n        returnKeyType=\"done\"\n        keyboardType=\"default\"\n        placeholder={working ? \"Add a To Do\" : \"Where to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos).map(key =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <Text style={styles.toDoText}>{toDos[key].text}</Text>\n              <TouchableOpacity onPress={() => deleteToDo(key)}>\n                <Fontisto name=\"trash\" size={21} color=\"red\" />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    borderRadius: 13,\n    marginTop: 30,\n    marginBottom: 40,\n    fontSize: 17,\n  },\n  toDo: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: theme.toDoBG,\n    marginBottom: 10,\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 13,\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 18,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}